{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-object' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar defineProperty = require( '@stdlib/utils-define-property' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Defines a memoized object property.\n*\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {Object} desc - property descriptor\n* @param {boolean} [desc.configurable=false] - boolean indicating if the property descriptor can be changed and if the property can be deleted from the provided object\n* @param {boolean} [desc.enumerable=false] - boolean indicating if the property shows up when enumerating object properties\n* @param {boolean} [desc.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator\n* @param {Function} desc.value - function whose return value will be memoized\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} third argument must be an object\n* @throws {TypeError} property descriptor `value` property must be a function\n*\n* @example\n* var obj = {};\n*\n* function foo() {\n*     return 'bar';\n* }\n*\n* defineMemoizedProperty( obj, 'foo', {\n*     'configurable': false,\n*     'enumerable': false,\n*     'writable': false,\n*     'value': foo\n* });\n*\n* var v = obj.foo;\n* // returns 'bar'\n*/\nfunction defineMemoizedProperty( obj, prop, desc ) {\n\tif ( !isObject( obj ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object. Value: `%s`.', obj ) );\n\t}\n\tif ( !isObject( desc ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Property descriptor must be an object. Value: `%s`.', desc ) );\n\t}\n\tif ( !isFunction( desc.value ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. The `value` property of the property descriptor must be a function. Value: `%s`.', desc.value ) );\n\t}\n\t// Copy descriptor properties to a new data descriptor object:\n\tdesc = {\n\t\t'configurable': ( desc.configurable === void 0 ) ? false : desc.configurable,\n\t\t'enumerable': ( desc.enumerable === void 0 ) ? false : desc.enumerable,\n\t\t'writable': ( desc.writable === void 0 ) ? false : desc.writable,\n\t\t'value': desc.value\n\t};\n\n\t// Define a configurable (at least temporarily) accessor property:\n\tdefineProperty( obj, prop, {\n\t\t'configurable': true,\n\t\t'enumerable': desc.enumerable,\n\t\t'get': getter,\n\t\t'set': ( desc.writable ) ? memoize : void 0\n\t});\n\n\t/**\n\t* Temporary get accessor.\n\t*\n\t* @private\n\t* @returns {*} property value\n\t*/\n\tfunction getter() {\n\t\tvar value = desc.value.call( obj );\n\t\tmemoize( value );\n\t\treturn value;\n\t}\n\n\t/**\n\t* Defines a memoized object property.\n\t*\n\t* @private\n\t* @param {*} value - value to set\n\t*/\n\tfunction memoize( value ) {\n\t\tdesc.value = value;\n\t\tdefineProperty( obj, prop, desc );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = defineMemoizedProperty;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Define a memoized object property.\n*\n* @module @stdlib/utils-define-memoized-property\n*\n* @example\n* var defineMemoizedProperty = require( '@stdlib/utils-define-memoized-property' );\n*\n* var obj = {};\n*\n* function foo() {\n*     return 'bar';\n* }\n*\n* defineMemoizedProperty( obj, 'foo', {\n*     'configurable': false,\n*     'enumerable': false,\n*     'writable': false,\n*     'value': foo\n* });\n*\n* var v = obj.foo;\n* // returns 'bar'\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAS,0BAA2B,EAC/CC,EAAa,QAAS,4BAA6B,EACnDC,EAAiB,QAAS,+BAAgC,EAC1DC,EAAS,QAAS,uBAAwB,EAoC9C,SAASC,EAAwBC,EAAKC,EAAMC,EAAO,CAClD,GAAK,CAACP,EAAUK,CAAI,EACnB,MAAM,IAAI,UAAWF,EAAQ,mEAAoEE,CAAI,CAAE,EAExG,GAAK,CAACL,EAAUO,CAAK,EACpB,MAAM,IAAI,UAAWJ,EAAQ,wEAAyEI,CAAK,CAAE,EAE9G,GAAK,CAACN,EAAYM,EAAK,KAAM,EAC5B,MAAM,IAAI,UAAWJ,EAAQ,qGAAsGI,EAAK,KAAM,CAAE,EAGjJA,EAAO,CACN,aAAkBA,EAAK,eAAiB,OAAW,GAAQA,EAAK,aAChE,WAAgBA,EAAK,aAAe,OAAW,GAAQA,EAAK,WAC5D,SAAcA,EAAK,WAAa,OAAW,GAAQA,EAAK,SACxD,MAASA,EAAK,KACf,EAGAL,EAAgBG,EAAKC,EAAM,CAC1B,aAAgB,GAChB,WAAcC,EAAK,WACnB,IAAOC,EACP,IAASD,EAAK,SAAaE,EAAU,MACtC,CAAC,EAQD,SAASD,GAAS,CACjB,IAAIE,EAAQH,EAAK,MAAM,KAAMF,CAAI,EACjC,OAAAI,EAASC,CAAM,EACRA,CACR,CAQA,SAASD,EAASC,EAAQ,CACzBH,EAAK,MAAQG,EACbR,EAAgBG,EAAKC,EAAMC,CAAK,CACjC,CACD,CAKAR,EAAO,QAAUK,ICnEjB,IAAIO,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isObject", "isFunction", "defineProperty", "format", "defineMemoizedProperty", "obj", "prop", "desc", "getter", "memoize", "value", "main"]
}
